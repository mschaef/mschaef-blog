Working Outside Your Comfort Zone

For the better part of my career, I've straddled the fence between
pure software development roles and consulting roles.  My first job
after graduating in 1997 was at a hardware firm developing embedded
software for process control hardware. Over the three years I was
working there, I was on point for everything from register-level
device drivers running on the custom hardware to a device
configuration GUI running on a PC.  By the time I left the firm, I
even had the opportunity to write a small programming language,
complete with compiler and 'VM'. This was a perfect job for a guy with
a freshly-minted Computer Science degree and a hankering to write some
cool code. At least it was perfect at first.

<br><br>

What ultimately drove me to leave that role is something that I think
most technical jobs, particularly those in product development, have
in common: a severe risk of detachment from your clients. Software
developers, myself included, tend to be an introverted lot; Even if
they weren't, it's oftentimes percieved to be in the best interests
of a software house to keep  software developers on task developing
software. In other words, there are both personal and corporate 
pressures to keep developers hacking away at the code
instead of talking to customers. The risk here is that the people who
best understand the products are the people that potentially least
understand the customers. I can tell you from firsthand experience
that, while I knew in detail the sampling characteristics of the
device I was building, I had no idea how it might be used in a
chemical plant to measure a temperature sensor and control a pump or a
heater. It's easy to develop a product in that kind of vacuum and then
get it totally wrong for your market. If you're not careful, it's also
easy to get your product totally wrong for your own company, which is
what arguably happened to the group I was in.

<br><br>

Organizations counter this risk of specialization by having other job
roles that can be more focused on customer needs and less focused.
From the perspective of someone sitting in an R&D lab, these other
jobs represent the steps a product takes out the door towards doing
useful work for a customer. A researcher discovers a new technology or
technique, a developer turns it into a product, a marketer figures out
how to promote it, a salesperson sells the product, and finally, a
consultant integrates it into the customer's system. As work moves
down this path, it gets progressively more applied and progressively
less abstract. The reverse is true too: the further away from pure
research you get, the closer you get to customer requirements. As much
as a development lab has the responsibility to push product out to
customers, customer-facing staff has the responsibilty to push
information on customer requirements back to the lab to drive product
development priorites.  If a developer isn't talking to a customer and
a consultant is, then it's a safe bet that the consultant has a better
idea of what a product needs to do to sell.

<br><br>

This is the reasoning that led me out of pure software development and
into a consulting role at a different firm. In this new role, I was on
projects developing configuration websites for computer resellers. If
you envision Dell's online computer configuration tool, you're not far
off from the kind of websites I was developing. While consultants at
this company still did a bit of programming, the theory was that the
heavy lifting of actually building the software was done in the
company's R&D lab. Consultants were to focus on more basic
customization and integration work. On my projects, most of my
software devlopment work was limited to customizing the layout of web
pages and writing interfaces to databases and authentication
providers. Interesting stuff, but not close to the same technical
league as what I was doing in my previous job.

<br><br>

The risks in this kind of internal consulting role are different than
the risks in a purely development role. Unlike a developer sitting in
an R&D lab, someone who might get to see a customer once a month or
two at best, a consultant quite often is working on-site with the
customer on a daily basis.  In fact, It's easy for a consultant to see
customer staff far more often than other employees of their own
company.  Of course, this potential isolation also includes the R&D
lab and the sales group.  In the worst case scenario, you end up with
three independant silos in your organization: sales selling whatever
they want, developers developing whatever they want, and the poor
consultants caught in the middle, between an over-ambitious contract
and a under-done base product. I shared an office with a guy working
on a project that was sold as a one month customization of one of our
other base products. When I joined the firm, this project was in its
18th month of (mostly non-billable) consulting time. There was
obviously a lot that had gone horribly wrong on that project, but
foremost was a total disconnect between what the salespeople thought
they had ready to sell and what the developers had actually produced
to sell. (Not that the consultants were blameless on that project
either: there were huge estimation and process problems in the
customization work plan.)

<br><br>

I do not know of a role that is completely free of these types of
risks, but my experience has
tended to be that the difference between success and failure in any
role is more related to communication with those around you than it
is to technical skills. It is as much about giving your stakeholders what
they want when they want it as it is anything else (including giving
them something 'great'). This can be a
difficult pill to swallow since it places emphasis on skills that do
not come naturally to many developers. If you're a developer used to 
setting the development agenda it's even worse, since it might involve
ceding at least some of this power to people downstream and closer to 
customers. However, if you're really good, you will do whatever it takes
(even it it's 'not your job') to know your customer's business well enough
to anticpate what they need before they request.  Either way, success is
ultimately about pressing your boundaries beyond your comfort zone to get
what you need to do the thing you love in a way that satisfies those
that care about your work. 
