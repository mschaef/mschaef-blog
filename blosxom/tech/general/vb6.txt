Visual BASIC

There's been some 'controversy' in the blog world about a 
<a href="http://classicvb.org/petition/">petition</a> that's circulating
to ask Microsoft to continue supporting "Classic" Visual BASIC in addition
to the replacement VB.Net. A month ago, I had a pretty long post dedicated
to the topic, but due to technical problems I wasn't able to get it online.
Therefore, I'll keep this sweet and to the point.

<br><br>

The core problem VB6 developers are facing is that they sank lots
of development money into a closed, one-vendor language. Choosing
VB6 basically amounted to a gamble that Microsoft would continue to
support and develop the language for the duration of a project's
active life. That gamble hasn't paid off for some developers, and
companies with sizable investments in VB6 code now need to figure out
how to make the most of that investment while still evolving their
software.

<br><br>

With standardized languages like C, languages with multiple tool vendors,
the risk is significantly lower. If one vendor drops their version
of a language, switching to another implementation is going to be a lot easier
than porting to an entirely different platform (particularly if you've
avoiced or isolated vendor-specific features).

<br><br>

So... what's the moral of this story? Before you base your
business on a particular language or tool, make sure you know what
happens if that platform ever loses support. Pick something
standardized, with multiple viable vendors. Or alternatively
pick something open source, where you can take over platform
development yourself (if you absolutely need to).  Whatever you do,
don't pick a one vendor tool and complain when the vendor
decides to drop it. <i>Commercial vendors, particularly, have
<b>no legal obligation</b> to their customers.</i>
